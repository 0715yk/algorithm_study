def find_boundary(num) :
    idx = 1
    result = 3**idx
    while result < num:
        idx+=1 
        result+= 3**idx

    return idx

def get_124_num(n,k) :
    answer = n - (3**(k-1))
    result = ""

    while k>0:
        k-=1
        if answer <= 3**k:
            result += "1"
            continue
        elif answer <= 2*(3**k):
            answer -= 3**k
            result += "2"
        else:
            answer -= 2*(3**k)
            result += "4"

    return result

def solution(n):
    answer = ''
    l = ["1","2","4"]
    k = find_boundary(n)
    if k==1:
        return l[n-1]
    print(k)
    answer = get_124_num(n,k)
    return answer
    
    # [1,2,4]로 두자리수 조합을 찾는데 9-3=6 이니까 6번째를 찾으면되는줄 알고 있음
    # 1로 만들 수 있는 2자리수 조합 3개
    # 그러면 1은 제껴도됨
    # 2로 만들 조합 = 3개
    # 3 < 6 <= 6 이니까 결국 2로 만들 조합 끝에 속함
    # 24
    # 이걸 구현해야하는데..
    # 다른 예.. [1,2,4] 일 때
    # 자연수 18이 나왔다해보자
    # 12 < 18 < 39 사이니까
    # 3자리수에 속함
    # 1로만들 수 있는 세자리수조합 => 3^2
    # 2로 만들 수 있는 세자리수 조합 => 3^2
    # 4.. => 3^2 =그래서 3^3이었다 ㅇㅇ
    # 그러면 결국 n자리수로 만들 수 있는 조합중 특정 숫자로 만들 수 있는 조합은
    # 3^n-1 이다
    # 그러면 만약 5억이 나왔다
    # 3^18<3^19 사이어서 19 자리수
    # 그러면 하나로 만들 수 있는 조합이 3^18이니까
    # 아니근데..3^18로 줄여도 너무많아..
    # 이걸 또한번가보면?
    # 1을 선택했다 => [1,2,4] 로 3^18개의 경우의수 만들 수 있음
    # 이거 재귀함수임 => 계속 선택할수록 3^17 => 3^16 => 3^15 => ...3^1
    # 까지 갈것
    # 근데 뭘 어떻게하든 3^n승 한것보다 경우의수가 준다
    # 예를 들어
    # 3^19 조합 안에서 찾는다할 때(find_boundary 다음 단계)
    # 1*3^18, 2*3^18, 3*3^18 이중 어느사이에 있는가를 찾으면
    # 2로 시작할지,1로 시작할지, 4로시작할지 판단가능
    # 0 <= <= 1*3^18 이거면 1로시작 
    # 1*3^18 < <= 2*3^18 이거면 2로시작 나머지는 4로시작
    # 이렇게 판단했으면 다음으로 넘어감 (해당숫자 기록하고)
    # 위에것만 하면 3번했다 경우의수
    # 그럼 다음도 똑같음 단지 3^17로 비교할뿐
    # 이 때 비교를 당하는 수는 계속해서 그 경우의 수만큼 없애면서 진행해야함
    # 그렇게 진행하면서 결국 그 비교당하는 수가 0에 수렴할 때까지 진행하면 답이나옴
    # 이걸 로직으로 짜려면
    
    # 1) boundar로 몇자리수인지 파악
    # n = 5억
    # k = 19
    # n - (3**(k-1)) = 	112579511
    # 그러면 정답은 19자리수 조합중에 112,579,511번째 수
    
    # 2) 이를 바탕으로 경우의수 줄여나가기
    # while문으로도 가능할듯?
    # 처음에 3^(k-1) 보다 같거나 작은지 체크해서
    # 같거나 작으면 => 첫번째 수는 1로 확정 
    # 크면 2*3^(k-1))보다 같거나 작은지 체크해서 =>그러면 2로 확정
    # 둘다 아니면 4로 확정
    
    # 다음으로 넘어가서 k-=1 해서
    # 위의 과정 똑같이 밟음 
    # 이렇게 쭉하다가 
    # 막판에 가서 
    # 114
    
    # n = 10
    # k = 2
    # 10 - (3^1) = 7번째 수
    # 3^1 2*3^1 3*3^1 3으로 시작하는구나
    # 3 6 9 
    # 4
    # 1남았는데
    # 
    # 6 < 9
    # 3^0 1 2 3 
    # 41
    # 

                

    # 전혀 갈피를 못잡음...ㅠ
    # 진법으로 푸는 문제였다고 함!
    