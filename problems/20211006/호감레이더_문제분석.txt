#### 문제 분석

맵과 주어진 리본의 개수를 문제에서 input으로 준다
문제에서 요구하는 바는 주어진 맵에 있는 정보를 바탕으로 
레이더의 범위별로 가중치의 합을 구해보면서
그 가중치의 합만큼의 이성 프로필 정보를 얻어볼 수 있다고 하는데
주어진 리본의 개수로 그 가중치의 합을 계산하는 구조인 것 같다.
그래서 주어진 리본의 개수보다 가중치의 합이 크면 계산을 할 수 없다.
따라서, 주어진 리본의 개수로 살 수 있는 최대한의 가중치의 합을 구하는 게 이문제에서 요구하는 바이다.

예를 들어
4 4 5
1 0 1 0
0 0 0 1
1 1 0 0
1 0 0 1

이걸 바탕으로 해보면
탐색할 수 있는 범위는 BFS의 탐색 경로와 비슷하다
상하좌우 까지가 10m 단위이기에 그 단위를 기준으로한다.
이 때, 레이더의 범위를 몇으로 놓을건지에 따라 가중치가 달라진다
예를 들어, 10m의 범위로 탐색하면 10m 내의 이성의 수에 가중치 1을 곱한다
또 20m의 범위로 탐색하면 10m범위 내의 이성의수에 *2를 하고, 20m거리의 이성의수에 *1을 한다. 그리고 더한다
30m를 탐색하면 (10m의수 * 3) + (20m의수 * 2) + (10m의 수 * 1) 이된다

이렇게 모든 좌표를 이런식으로 탐색했을 때, 지금 가지고 있는 리본의 개수 기준으로 커버할 수 있는 최대 가중치의 합 값을 구하면 된다.
이 때, 탐색하다가 가중치의 합이 리본의 개수와 동일하면 그것이 답이다(리본 개수 이상으로는 어차피 프로필 열람을 못하므로)

#### 문제 해결책 강구

1) input 처리
주어진 맵을 maps라는 N*M 배열로 만드는데, 이 때, 경계처리를 -1로 하면될듯
2) 탐색
만들어놓은 maps라는 배열을 (1,1) - (n,n)까지 탐색하면됨(경계처리를 했기에)
3) 좌표 하나하나를 탐색하면서 가중치의 합을 구해야하는데, 이 때, 레이더의 범위에 따라 가중치의 합을 여러번 구해야함
자세히 말해보면, 
(1,1)을 탐색할 때 거기를 기준으로 상하좌우를 탐색한다음에(10m거리임)
다음으로 그 상하좌우 좌표들을 바탕으로 또 상하좌우를 탐색함(지났던 곳은 제외)그렇게 20m 거리를 탐색할 수 있음
이런식으로 모든 칸을 탐색할 때까지 탐색을 하면(중간에 장애물이 있는 것도 아니므로 무조건 모든칸을 탐색하게 돼있음)
10,20,30...n*10m 단위로 각 거리에 있는 이성들의 합을 구할 수 있을 것임(1)
하지만 여기서 끝나는 것이 아니라
레이더 범위별 가중치의 합이 다르기에 이에 대한 처리가 필요함(2)

예를 들어, 10m 3명 / 20m : 4명 / 30m : 5명 / 40m :1명 이렇게 정보를 받아놨다고 할 때
10m 레이더에서는 3*1 = 3명 
20m 레이더에서는 2*3 + 1*4 = 10명 
30m 레이더에서는 3*3 + 2*4 + 3*5 = 9 + 8 + 15 = 32가 된다.
이런식으로 m별로 가중치의 합이다르다.

이렇게 모든 범위 별 레이더 가중치의 합을 구한 다음에 
그 각각의 수중에 리본의 수보다작거나 같으면서 가장 큰수를 구해야한다.
=====/ 여기까지가 한 좌표에 대한 하나의 시행이다. 

4) 이렇게 3번의 과정을 모든 좌표에서 시행하면서 최대값을 갱신한다. 이 때, 3번의 시행에서 결과 값이 리본의 수와 같이 나온다면
그대로 리턴한다. 

##### 실제 예시를 통한 코드 설계 
4 4 5
1 0 0 1
0 0 1 1
1 0 0 0
0 1 0 1

n = 4 
m = 4 
k = 5

1) input 배열로 만들기
maps = []

for i in range(n)
    maps.append([-1]+list(map(int, input().split()))+[-1])

limit_line = [[-1 for i in range(m+2)]]
maps = limit_line + maps + limit_line

2) 탐색 시작

for i in range(1,n+1):
    for j in range(1,n+1):
        dot = (i,j)

3) 여기서 BFS를 하는 함수를 만들자
def get_max(root):

 BFS를 해야하는데, 첫 좌표의 m를 0이라고 했을 때 이 첫 좌표의 자식 노드들은 이 0+10m임(거리가)
 그리고 이 자식 노드들의 자식 노드들은 0+10m+10m임(거리가) 이런식으로
 BFS 방식으로 쭉 훑으면서 각 m당 이성의 수를 카운트해놓고 그것을 딕셔너리로 만들고(1)
global maps
queue = [root]
path = {}
inform = {}
inform[root] = 0
meter = {}

while len(queue) != 0 :
    top = queue.pop(0)
    path[top] = True

    for way in [(top[0]-1,top[1]), (top[0],top[1]+1), (top[0]+1,top[1]), (top[0],top[1]-1)]:
        try:
            if path[way]:
                continue
        except:
            queue.append(way)
            if maps[way[0]][way[1]] == 1:
                inform[way] = inform[top] + 10 
                try:
                    meter[inform[top] + 10]+= 1 
                except:
                    meter[inform[top] + 10] = 1 


 그 딕셔너리를 바탕으로 
10m 3명 / 20m : 4명 / 30m : 5명 / 40m :1

10m 레이더에서는 3*1 = 3명 
20m 레이더에서는 2*3 + 1*4 = 10명 
30m 레이더에서는 3*3 + 2*4 + 3*5 = 9 + 8 + 15 = 32가 된다.
위에서 말한 이것을 구해야함

딕셔너리를 순회하면서 
다시 

max = -1 

for i in range(딕셔너리의 길이)
    대신 이 딕셔너리 key를 기준으로 오름차순 정렬해야함
    num = i
    sum_num = 0
    for cnt,val in list(dict.keys())[:i]:
        sum_num += val * num 
        num -= 1
    if sum_num > max:
        if sum_num <= 리본개수:  
            max = sum_num
        else:
            return max

